/// @title Huffbits
/// @notice SPDX-License-Identifier: Unlicencse
/// @author furnic <https://github.com/nfurfaro>
/// @notice Library of utils for bitwise operations
/// @notice Ported from Sway-Bits: <https://github.com/nfurfaro/sway-bits>


// Interface
#define function singleBitMask(uint256) pure returns(uint256)
#define function multiMask(uint256) pure returns(uint256)
#define function toggleBit(uint256, uint256) pure returns(uint256)
#define function queryBit(uint256, uint256) pure returns(uint256)
#define function setBit(uint256, uint256) pure returns(uint256)
#define function clearBit(uint256, uint256) pure returns(uint256)

/// Get a bitmask with a single `1` at the nth position.
#define macro SINGLE_BITMASK() = takes(1) returns(1) {
    // input stack          //                 [shift]
    0x01                    //              [1, shift]
    swap1                   //              [shift, 1]
    shl                     //               [shifted]
}

// Get a bitmask of n ones begining at the least significant bit.
#define macro MULTIMASK() = takes(1) returns(1) {
    // input stack                            [n]
    0x01                    //             [1, n]
    swap1                   //             [n, 1]
    dup2                    //          [1, n, 1]
    swap1                   //          [n, 1, 1]
    shl                     //       [shifted, 1]
    sub                     //           [result]
}

/// Flip the nth bit in a bitmap.
#define macro TOGGLE_BIT() = takes(2) returns(1) {
    // input stack          //       [bit, bitmap]
    SINGLE_BITMASK()        //      [mask, bitmap]
    xor                     //            [result]
}

/// Given a bitmap, check whether a bit is set.
#define macro QUERY_BIT() = takes(2) returns(1) {
    // input stack         //       [bit, bitmap]
    dup1                   //  [bit, bit, bitmap]
    swap2                  //  [bitmap, bit, bit]
    swap1                  //  [bit, bitmap, bit]
    SINGLE_BITMASK()       // [mask, bitmap, bit]
    and                    //          [and, bit]
    swap1                  //          [bit, and]
    shr                    //           [shifted]
}

/// Given a bitmap, set a bit to "1" if not already set, otherwise return the original bitmap.
#define macro SET_BIT() = takes(2) returns(1) {
    // input stack  //            [bit, bitmap]
    0x00            // [empty_map, bit, bitmap]
    swap1           // [bit, empty_map, bitmap]
    TOGGLE_BIT()    //           [mask, bitmap]
    or
}

/// Given a bitmap, clear a bit if set, otherwise return the original bitmap.
#define macro CLEAR_BIT() = takes(2) returns(1) {
    // input stack     //           [bit, bitmap]
    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF                         // [full_map, bit, bitmap]
    swap1              // [bit, full_map, bitmap]
    TOGGLE_BIT()       //          [mask, bitmap]
    and
}