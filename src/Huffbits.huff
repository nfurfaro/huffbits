/// @title Huffbits
/// @notice SPDX-License-Identifier: Unlicencse
/// @author furnic <https://github.com/nfurfaro>
/// @notice Library of utils for bitwise operations
/// @notice Ported from Sway-Bits: <https://github.com/nfurfaro/sway-bits>


// Interface
#define function bitMask(uint256) pure returns(uint256)
#define function multiMask(uint256) pure returns(uint256)
#define function nibbleMask(uint256) pure returns(uint256)
#define function toggleBit(uint256, uint256) pure returns(uint256)
#define function queryBit(uint256, uint256) pure returns(uint256)
#define function setBit(uint256, uint256) pure returns(uint256)
#define function clearBit(uint256, uint256) pure returns(uint256)
#define function clearNibble(uint256, uint256) pure returns(uint256)

#define constant MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

/// Get a bitmask with a single `1` at the nth position.
#define macro BITMASK() = takes(1) returns(1) {
    // input stack          //                 [shift]
    0x01                    //              [1, shift]
    swap1                   //              [shift, 1]
    shl                     //               [shifted]
}

// Get a bitmask of n `1`s begining at the least significant bit.
#define macro MULTIMASK() = takes(1) returns(1) {
    // input stack                            [n]
    0x01                    //             [1, n]
    swap1                   //             [n, 1]
    dup2                    //          [1, n, 1]
    swap1                   //          [n, 1, 1]
    shl                     //       [shifted, 1]
    sub                     //           [result]
}

/// Generate a mask for clearing a nibble, eg: NIBBLEMASK(3) => 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0FFF;
/**
Original Sway algorithm
pub fn b256_multimask(n: u64) -> b256 {
    assert(n < 64);
    let mut mask_part_1 = b256::max();
    let mut mask_part_2 = b256::max();
    mask_part_1 = mask_part_1 << (n * 4 + 4);
    mask_part_2 = mask_part_2 >> (256 - n * 4);
    mask_part_1 | mask_part_2
}
*/
#define macro NIBBLEMASK() = takes(1) returns(1) {
    // input stack          //                 [n]
    // enforce n < 64
    0x40                    //             [64, n]
    dup2                    //          [n, 64, n]
    lt                      //            [lt?, n]
    continue jumpi
    0x00 0x00 revert

    continue:     //                           [n]
        [MAX]     //                      [max, n]
        dup1      //                 [max, max, n]
        dup3      //              [n, max, max, n]
        0x04      //           [4, n, max, max, n]
        mul       //           [prod, max, max, n]
        0x04      //        [4, prod, max, max, n]
        add       //            [sum, max, max, n]
        shl       //               [mask1, max, n]
        swap1     //               [max, mask1, n]
        0x04      //            [4, max, mask1, n]
        dup4      //         [n, 4, max, mask1, n]
        mul       //         [prod, max, mask1, n]
        0x100     //    [256, prod, max, mask1, n]
        sub       //         [diff, max, mask1, n]
        shr       //             [mask2, mask1, n]
        or        //                   [result, n]
        swap1     //                   [n, result]
        pop       //                      [result]
}

/// Flip the nth bit in a bitmap.
#define macro TOGGLE_BIT() = takes(2) returns(1) {
    // input stack          //       [bit, bitmap]
    BITMASK()        //      [mask, bitmap]
    xor                     //            [result]
}

/// Given a bitmap, check whether a bit is set.
#define macro QUERY_BIT() = takes(2) returns(1) {
    // input stack         //       [bit, bitmap]
    dup1                   //  [bit, bit, bitmap]
    swap2                  //  [bitmap, bit, bit]
    swap1                  //  [bit, bitmap, bit]
    BITMASK()       // [mask, bitmap, bit]
    and                    //          [and, bit]
    swap1                  //          [bit, and]
    shr                    //           [shifted]
}

/// Given a bitmap, set a bit to "1" if not already set, otherwise return the original bitmap.
#define macro SET_BIT() = takes(2) returns(1) {
    // input stack  //            [bit, bitmap]
    0x00            // [empty_map, bit, bitmap]
    swap1           // [bit, empty_map, bitmap]
    TOGGLE_BIT()    //           [mask, bitmap]
    or
}

/// Given a bitmap, clear a bit if set, otherwise return the original bitmap.
#define macro CLEAR_BIT() = takes(2) returns(1) {
    // input stack     //           [bit, bitmap]
    [MAX]                         // [full_map, bit, bitmap]
    swap1              // [bit, full_map, bitmap]
    TOGGLE_BIT()       //          [mask, bitmap]
    and
}

/// Given a bitmap, clear a nibble if set, otherwise return the original bitmap.
#define macro CLEAR_NIBBLE() = takes(2) returns(1) {
    // input stack     //            [index, bitmap]
    NIBBLEMASK()       //             [mask, bitmap]
    and
}